import groovy.json.JsonSlurperClassic

node {
    def toolbelt = tool 'sfdx'
	def HUB_ORG=env.HUB_ORG_DH
	def SFDC_HOST = env.SFDC_HOST_DH
	def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
	def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH
    
	def SFDC_USERNAME
	
    stage('checkout'){
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [], submoduleCfg: [], 
                    userRemoteConfigs: [[
                        credentialsId: 'a6de8c78-c606-4dd6-9c6c-a95c4b4ef3f9', 
                        url: 'https://github.com/forcedotcom/sfdx-simple.git']
                    ]]
        )
    }
	withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
		stage('Create Scratch Org') {
			rc = sh returnStatus: true, script: " ${toolbelt}/sfdx force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
			if (rc != 0) { 
				error 'hub org authorization failed' 
			}
			// need to pull out assigned username
			rmsg = sh returnStdout: true, script: " ${toolbelt}/sfdx force:org:create --definitionfile config/workspace-scratch-def.json --json --setdefaultusername"
			echo("${rmsg}")
			def jsonSlurper = new JsonSlurperClassic()
			def robj = readJSON text: '$rmsg'
			if (robj.status != "ok") { 
				error 'org creation failed: ' + robj.message 
			}
			SFDC_USERNAME=robj.username
			robj = null
		}
		
		stage('Push To Test Org') {
			rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:source:push --targetusername ${SFDC_USERNAME}"
			if (rc != 0) {
				error 'push all failed'
			}
			// assign permset
			rc = sh returnStatus: true, script: " ${toolbelt}/sfdx force:user:permset:assign --targetusername ${SFDC_USERNAME} --permsetname DreamHouse "
			if (rc != 0) {
				error 'push all failed'
			}
		}
		
		stage('Run Apex Test') {
			sh "mkdir -p ${RUN_ARTIFACT_DIR}"
			timeout(time: 120, unit: 'SECONDS') {
				rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --resultformat tap --targetusername ${SFDC_USERNAME}"
				if (rc != 0) {
					error 'apex test run failed'
				}
			}
		}
		
		stage('collect results') {
			junit keepLongStdio: true, testResults: 'tests/**/*-junit.xml'
		}
		
		stage('Delete Test Org') {
			timeout(time: 120, unit: 'SECONDS') {
				rc = sh returnStatus: true, script: " ${toolbelt}/sfdx force:org:delete --targetusername ${SFDC_USERNAME} --noprompt "
				if (rc != 0) {
					error 'org deletion request failed'
				}
			}
		}
	}
}