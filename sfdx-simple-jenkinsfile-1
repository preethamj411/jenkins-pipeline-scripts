#!groovy

node {
    def toolbelt = tool 'sfdx'
	def HUB_ORG=env.HUB_ORG_DH
	def SFDC_HOST = env.SFDC_HOST_DH
	def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
	def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH
    def RUN_ARTIFACT_DIR = 'target/tests'
	def SFDC_USERNAME
	
    stage('checkout'){
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [], submoduleCfg: [], 
                    userRemoteConfigs: [[
                        credentialsId: 'a6de8c78-c606-4dd6-9c6c-a95c4b4ef3f9', 
                        url: 'https://github.com/forcedotcom/sfdx-simple.git']
                    ]]
        )
    }
	stage('Create Scratch Org') {
		rc = sh returnStatus: true, script: " ${toolbelt}/sfdx force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${JWT_KEY_CRED_ID} --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
		if (rc != 0) { 
			error 'hub org authorization failed' 
		}
		// need to pull out assigned username
		rmsg = sh returnStdout: true, script: " ${toolbelt}/sfdx force:org:create --definitionfile config/workspace-scratch-def.json --json --setdefaultusername"
		def robj = readJSON text: "$rmsg"
		if (robj.status != "ok") { 
			error 'org creation failed: ' + robj.message 
		}
		SFDC_USERNAME=robj.username
		robj = null
	}
	
	stage('Push To Test Org') {
		rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:source:push --targetusername ${SFDC_USERNAME}"
		if (rc != 0) {
			error 'push all failed'
		}
		// assign permset
		/*rc = sh returnStatus: true, script: " ${toolbelt}/sfdx force:user:permset:assign --targetusername ${SFDC_USERNAME} --permsetname jwt "
		if (rc != 0) {
			error 'push all failed'
		}*/
	}
	
	stage('Run Apex Test') {
		sh "mkdir -p ${RUN_ARTIFACT_DIR}"
		timeout(time: 120, unit: 'SECONDS') {
			rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --resultformat tap --targetusername ${SFDC_USERNAME} --codecoverage"
			echo("${rc}")
			if (rc != 0) {
				error 'apex test run failed'
			}
			def files = findFiles(glob: "${RUN_ARTIFACT_DIR}/test-result-*.json")
			def robj = readJSON file: "${files[0].path}"
			def coveredPercent = codeCoverageMatrix(robj)
			echo("coveredPercent : ${coveredPercent} ")
		}
	}
	
	stage('collect results') {
		junit keepLongStdio: true, testResults: "${RUN_ARTIFACT_DIR}/*-junit.xml"
	}
	
	step([$class: 'AnalysisPublisher', canComputeNew: false, defaultEncoding: '', healthy: '', unHealthy: ''])
	
	stage('Delete Test Org') {
		timeout(time: 120, unit: 'SECONDS') {
			rc = sh returnStatus: true, script: " ${toolbelt}/sfdx force:org:delete --targetusername ${SFDC_USERNAME} --noprompt "
			if (rc != 0) {
				error 'org deletion request failed'
			}
		}
	}
}

@NonCPS
def codeCoverageMatrix(result) {
	def totalLines = 0
	def totalCovered = 0
	result.coverage.coverage.each { it ->
		totalLines = totalLines + it.totalLines
		totalCovered = totalCovered + it.totalCovered
	}
	def coveredPercent = totalCovered / totalLines
}
